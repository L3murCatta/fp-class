import Data.Char
import Data.List
import Numeric

{-
Явная рекурсия в решениях хотя и допускается, но не приветствуется. Старайтесь обходиться стандартными
функциями, используя при этом создание функций «на лету». Пытайтесь максимально упростить уже написанные
решения, применяя подходящие функции из модуля Data.List и любых других модулей. Перед выполнением заданий
изучите примеры из лекции по функциям высшего порядка. 
-}

{-
 1. Простейшие задачи на применение функций map и filter.
 1.1 Преобразовать данный список целых чисел следующим образом:
  a) увеличить все его элементы в два раза;
  b) увеличить все его элементы с четными значениями в два раза;
  с) обнулить все его элементы с нечетными значениями;
  d) удалить из него элементы, большие заданного числа k;
  e) отфильтровать его, оставив в списке только отрицательные числа;
  f) удалить из него все положительные чётные числа.
-}

f11a :: Integral a => [a] -> [a]
f11a = map (*2)

f11b :: Integral a => [a] -> [a]
f11b = map (\x -> if even x then 2*x else x)

f11c :: Integral a => [a] -> [a]
f11c = map (\x -> if odd x then 0 else x)

f11d :: Integral a => [a] -> a -> [a]
f11d l k = filter (<= k) l

f11e :: Integral a => [a] -> [a]
f11e = filter (<0)

f11f :: Integral a => [a] -> [a]
f11f = filter even . filter (>0)

{-
 1.2 Дан список декартовых координат точек на плоскости (пар вещественных чисел).
     Преобразовать его следующим образом:
  a) отфильтровать список так, чтобы в нём остались точки из заданной координатной четверти;
  b) преобразовать декартовы координаты в полярные.
-}

type Point = (Double, Double)

f12a :: [Point] -> Int -> [Point]
f12a l k
  | k == 1 = filter (\x -> fst x > 0) (filter (\x -> snd x > 0) l)
  | k == 2 = filter (\x -> fst x < 0) (filter (\x -> snd x > 0) l)
  | k == 3 = filter (\x -> fst x < 0) (filter (\x -> snd x < 0) l)
  | otherwise = filter (\x -> fst x > 0) (filter (\x -> snd x < 0) l)
  
f12b :: [Point] -> [Point]
f12b = map (\x -> (fst x * fst x + snd x * snd x, atan (snd x / fst x)))

{-
 1.3 Дан список слов.
  a) Преобразовать все слова к верхнему регистру.
  b) Извлечь из него подсписок слов заданной длины.
  c) Извлечь из него подсписок слов, начинающихся с заданной буквы.
-}

f13a :: [String] -> [String]
f13a = map (map toUpper)

f13b :: Int -> [String] -> [String]
f13b k = filter (\x -> length x == k)

f13c :: Char -> [String] -> [String]
f13c l = filter (\x -> head x == l)

{-
2. Формирование числовых последовательностей (iterate).
 a) Список натуральных чисел, начиная с 0.
 b) Список чётных чисел.
 c) Список элементов последовательности: a0=1, an=(1+an-1)/2.
 d) Список символов английского алфавита.
 e) Список строк, представляющих n-значные двоичные числа.
-}

nats :: [Integer]
nats = iterate (+1) 0

evens :: [Integer]
evens = iterate (+2) 0

tseq :: [Double]
tseq = iterate ((/2) . (+1)) 1

englets :: [Char]
englets = take 26 (iterate succ 'a')

binaries :: [String]
binaries = map (\x -> showIntAtBase 2 intToDigit x "") (iterate (+1) 0)

{-
3. Группировка списков.
  a) Дан список символов. Сгруппировать подряд идущие символы по принципу: цифры — не цифры — ...
  b) Дан список пар вещественных чисел (координат точек на плоскости). Сгруппировать подряд идущие
     координаты точек, лежащие в одной координатной четверти.
  c) Дан список и ненулевое натуральное число n. Разбить список на подсписки длиной n каждый.
     Последний подсписок может содержать менее n элементов.
  d) Дан список и ненулевые натуральные числа n и m. Разбить список на перекрывающиеся подсписки
     длиной n элементов со сдвигом относительно предыдущего подсписка на m элементов.
  e) Дан список. Определить длину самого длинного подсписка, содержащего подряд идущие одинаковые элементы.
-}

f3a :: [Char] -> [[Char]]
f3a = groupBy (\x y -> isDigit x == isDigit y)

f3b :: [Point] -> [[Point]]
f3b = groupBy (\x y -> (fst x * fst y > 0) && (snd x * snd y > 0))

f3c :: Int -> [a] -> [[a]]
f3c k x = if length x <= k then [x] else [fst (splitAt k x)] ++ f3c k (snd (splitAt k x))

f3d :: [a] -> Int -> Int -> [[a]]
f3d xs n m
  | length xs <= m = [take n xs]
  | otherwise = [take n xs] ++ (f3d (drop m xs) n m)

-- Должно быть True
test_f3d = f3d [1..10] 4 2 == [[1,2,3,4],[3,4,5,6],[5,6,7,8],[7,8,9,10],[9,10]]

{-
4. Разные задачи.
 a) Дан текст в виде строки символов, содержащий среди прочего числовые данные. Посчитать количество
    всех упоминающихся в тексте чисел.
 b) Найти сумму всех чисел Фибоначчи, удовлетворяющих заданному предикату, в указанном промежутке
    (например: все чётные от 1 до 106).
 c) Дана строка текста и число n. Сформировать список, содержащий n самых часто используемых
    в строке символов.
 d) Дан список чисел. Сформировать список локальных максимумов исходного списка. Локальным максимумом
    называется элемент, больший своих соседей.
 e) Дан список. Продублировать все его элементы.
-}

f4a :: String -> Int
f4a = length . filter (isNumber) . f3a
  where
    isNumber :: String -> Bool
    isNumber = and . map (\x -> isDigit x)
	
f4b :: (Int -> Bool) -> Int -> Int -> Int
f4b p a b = sum (filter p (takeWhile (< b) fibs \\ takeWhile (< a) fibs))
  where
    fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

f4c :: String -> Int -> [Char]
f4c s n = map (\x -> fst x) (take n (sortBy (\ x y -> if snd x > snd y then LT else GT) (map (\x -> (head x, length x)) (group (sort s)))))

f4d :: [Int] -> [Int]
f4d l = map (\x -> fst x) (filter (\x -> snd x == 0) (zipWith (\x y -> if (x > fst y) && (x > snd y) then (x, 0) else (x, 1)) (drop 1 (take (length l - 1) l))(zip (drop 2 l) (take (length l - 2) l))))

f4e :: [a] -> [a]
f4e = intercalate [] . (map (\x -> [x, x]))